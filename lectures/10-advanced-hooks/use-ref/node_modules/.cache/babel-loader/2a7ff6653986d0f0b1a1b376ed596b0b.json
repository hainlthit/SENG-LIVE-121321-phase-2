{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/local/SENG-LIVE-121321-phase-2/lectures/10-advanced-hooks/use-ref/src/components/TickerChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { makeRandomNumber } from \"../utils\";\nimport { addPoint } from \"../utils/chart\";\n\nfunction Ticker() {\n  _s();\n\n  const [price, setPrice] = useState({\n    value: 0,\n    ticks: 0\n  });\n  const [color, setColor] = useState(\"black\");\n  const prevPrice = useRef(price);\n  const canvasRef = useRef();\n  useEffect(() => {\n    addPoint(canvasRef.current, prevPrice.current, price);\n  }, [price]);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setPrice(price => ({\n        ticks: price.ticks + 1,\n        value: makeRandomNumber()\n      }));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n  useEffect(() => {\n    if (prevPrice.current.value < price.value) {\n      setColor(\"green\");\n    } else if (prevPrice.current.value > price.value) {\n      setColor(\"red\");\n    } else {\n      setColor(\"black\");\n    }\n\n    prevPrice.current = price;\n  }, [price]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TickerChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: color\n      },\n      children: [\"Price: $\", price.value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ticker, \"Es7IdFsCnBA2XE7fwXsOTSc227c=\");\n\n_c = Ticker;\nexport default Ticker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ticker\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/local/SENG-LIVE-121321-phase-2/lectures/10-advanced-hooks/use-ref/src/components/TickerChart.js"],"names":["React","useEffect","useRef","useState","makeRandomNumber","addPoint","Ticker","price","setPrice","value","ticks","color","setColor","prevPrice","canvasRef","current","id","setInterval","clearInterval"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AAAEM,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,KAAK,EAAE;AAAnB,GAAD,CAAlC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAMU,SAAS,GAAGX,MAAM,CAACK,KAAD,CAAxB;AACA,QAAMO,SAAS,GAAGZ,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,QAAQ,CAACS,SAAS,CAACC,OAAX,EAAoBF,SAAS,CAACE,OAA9B,EAAuCR,KAAvC,CAAR;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,EAAE,GAAGC,WAAW,CAAC,MAAM;AAC3BT,MAAAA,QAAQ,CAAED,KAAD,KAAY;AACnBG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc,CADF;AAEnBD,QAAAA,KAAK,EAAEL,gBAAgB;AAFJ,OAAZ,CAAD,CAAR;AAID,KALqB,EAKnB,IALmB,CAAtB;AAMA,WAAO,MAAMc,aAAa,CAACF,EAAD,CAA1B;AACD,GARQ,EAQN,EARM,CAAT;AAUAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,SAAS,CAACE,OAAV,CAAkBN,KAAlB,GAA0BF,KAAK,CAACE,KAApC,EAA2C;AACzCG,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAFD,MAEO,IAAIC,SAAS,CAACE,OAAV,CAAkBN,KAAlB,GAA0BF,KAAK,CAACE,KAApC,EAA2C;AAChDG,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAFM,MAEA;AACLA,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD;;AACDC,IAAAA,SAAS,CAACE,OAAV,GAAoBR,KAApB;AACD,GATQ,EASN,CAACA,KAAD,CATM,CAAT;AAWA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,GAAG,EAAEO,SAAb;AAAwB,MAAA,KAAK,EAAE,GAA/B;AAAoC,MAAA,MAAM,EAAE;AAA5C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAI,MAAA,KAAK,EAAE;AAAEH,QAAAA,KAAK,EAAEA;AAAT,OAAX;AAAA,6BAAsCJ,KAAK,CAACE,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAtCQH,M;;KAAAA,M;AAwCT,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { makeRandomNumber } from \"../utils\";\nimport { addPoint } from \"../utils/chart\";\n\nfunction Ticker() {\n  const [price, setPrice] = useState({ value: 0, ticks: 0 });\n  const [color, setColor] = useState(\"black\");\n  const prevPrice = useRef(price);\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    addPoint(canvasRef.current, prevPrice.current, price);\n  }, [price]);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setPrice((price) => ({\n        ticks: price.ticks + 1,\n        value: makeRandomNumber(),\n      }));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  useEffect(() => {\n    if (prevPrice.current.value < price.value) {\n      setColor(\"green\");\n    } else if (prevPrice.current.value > price.value) {\n      setColor(\"red\");\n    } else {\n      setColor(\"black\");\n    }\n    prevPrice.current = price;\n  }, [price]);\n\n  return (\n    <div>\n      <h1>TickerChart</h1>\n      <canvas ref={canvasRef} width={600} height={400} />\n      <h2 style={{ color: color }}>Price: ${price.value}</h2>\n    </div>\n  );\n}\n\nexport default Ticker;\n"]},"metadata":{},"sourceType":"module"}